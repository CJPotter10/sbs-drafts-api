// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package api

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVED_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPOILEDBANANASOCIETY_PROVENANCE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipFreeWalletState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPresaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeWalletIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeWalletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"initFreeWalletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"walletList\",\"type\":\"address[]\"}],\"name\":\"initPresaleWalletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFreeWalletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintPresaleWalletList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleWalletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_setPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provenanceHash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052600060809081526008906200001a9082620001ea565b506000600a819055600b55600c805461ffff19169055600e805460ff191690553480156200004757600080fd5b506040518060400160405280601881526020017f53425320447261667420546f6b656e20536561736f6e203100000000000000008152506040518060400160405280600381526020016253425360e81b8152508160009081620000ab9190620001ea565b506001620000ba8282620001ea565b505050620000d7620000d1620000ef60201b60201c565b620000f3565b6006805460ff60a01b191690556001600755620002b6565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017057607f821691505b6020821081036200019157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e557600081815260208120601f850160051c81016020861015620001c05750805b601f850160051c820191505b81811015620001e157828155600101620001cc565b5050505b505050565b81516001600160401b0381111562000206576200020662000145565b6200021e816200021784546200015b565b8462000197565b602080601f8311600181146200025657600084156200023d5750858301515b600019600386901b1c1916600185901b178555620001e1565b600085815260208120601f198616915b82811015620002875788860151825594840194600190910190840162000266565b5085821015620002a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61263a80620002c66000396000f3fe60806040526004361061025c5760003560e01c80635c975abb11610144578063a0712d68116100b6578063d2d8cb671161007a578063d2d8cb67146106a5578063daefe6d2146106bf578063e985e9c5146106d4578063f2fde38b146106f4578063f81227d414610714578063fdc9b4831461072957600080fd5b8063a0712d681461061d578063a22cb46514610630578063b88d4fde14610650578063c87b56dd14610670578063cca979111461069057600080fd5b8063715018a611610108578063715018a61461057a578063748c45571461058f5780637b51715d146105bf578063894a8cac146105d55780638da5cb5b146105ea57806395d89b411461060857600080fd5b80635c975abb146104fb5780635d04aeab1461051a5780636352211e1461053a57806368fc68c7146103c557806370a082311461055a57600080fd5b806327ac36c4116101dd57806342966c68116101a157806342966c6814610459578063452b67cb14610479578063471a42941461048c5780634f699a43146104a657806355f804b3146104c657806359c74f29146104e657600080fd5b806327ac36c4146103da57806330f72cd4146103ef5780633ccfd60b1461040e5780634230baee1461042357806342842e0e1461043957600080fd5b80631096952311610224578063109695231461034257806316c38b3c1461036257806318160ddd1461038257806323b872dd146103a557806323eb0032146103c557600080fd5b806301ffc9a71461026157806306fdde0314610296578063081812fc146102b8578063095ea7b3146102f05780630c9a631314610312575b600080fd5b34801561026d57600080fd5b5061028161027c366004611e46565b610743565b60405190151581526020015b60405180910390f35b3480156102a257600080fd5b506102ab610795565b60405161028d9190611eb3565b3480156102c457600080fd5b506102d86102d3366004611ec6565b610827565b6040516001600160a01b03909116815260200161028d565b3480156102fc57600080fd5b5061031061030b366004611efb565b61084e565b005b34801561031e57600080fd5b5061028161032d366004611f25565b600f6020526000908152604090205460ff1681565b34801561034e57600080fd5b5061031061035d366004611fdf565b610968565b34801561036e57600080fd5b5061031061037d366004612038565b610980565b34801561038e57600080fd5b506103976109a0565b60405190815260200161028d565b3480156103b157600080fd5b506103106103c0366004612053565b6109b7565b3480156103d157600080fd5b50610397601481565b3480156103e657600080fd5b506103106109e9565b3480156103fb57600080fd5b50600c5461028190610100900460ff1681565b34801561041a57600080fd5b50610310610a3b565b34801561042f57600080fd5b50610397600a5481565b34801561044557600080fd5b50610310610454366004612053565b610a5f565b34801561046557600080fd5b50610310610474366004611ec6565b610a7a565b610310610487366004611ec6565b610b09565b34801561049857600080fd5b50600c546102819060ff1681565b3480156104b257600080fd5b506103106104c136600461208f565b610c73565b3480156104d257600080fd5b506103106104e1366004611fdf565b610ce3565b3480156104f257600080fd5b50610310610cf7565b34801561050757600080fd5b50600654600160a01b900460ff16610281565b34801561052657600080fd5b5061031061053536600461208f565b610d13565b34801561054657600080fd5b506102d8610555366004611ec6565b610d83565b34801561056657600080fd5b50610397610575366004611f25565b610de3565b34801561058657600080fd5b50610310610e69565b34801561059b57600080fd5b506102816105aa366004611f25565b600d6020526000908152604090205460ff1681565b3480156105cb57600080fd5b50610397600b5481565b3480156105e157600080fd5b50610310610e7d565b3480156105f657600080fd5b506006546001600160a01b03166102d8565b34801561061457600080fd5b506102ab610e99565b61031061062b366004611ec6565b610ea8565b34801561063c57600080fd5b5061031061064b36600461213c565b610f6c565b34801561065c57600080fd5b5061031061066b36600461216f565b610f77565b34801561067c57600080fd5b506102ab61068b366004611ec6565b610faf565b34801561069c57600080fd5b50610310611016565b3480156106b157600080fd5b506103976509184e72a00081565b3480156106cb57600080fd5b506102ab61110d565b3480156106e057600080fd5b506102816106ef3660046121eb565b61119b565b34801561070057600080fd5b5061031061070f366004611f25565b6111c9565b34801561072057600080fd5b5061031061123f565b34801561073557600080fd5b50600e546102819060ff1681565b60006001600160e01b031982166380ac58cd60e01b148061077457506001600160e01b03198216635b5e139f60e01b145b8061078f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546107a490612215565b80601f01602080910402602001604051908101604052809291908181526020018280546107d090612215565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b5050505050905090565b600061083282611264565b506000908152600460205260409020546001600160a01b031690565b600061085982610d83565b9050806001600160a01b0316836001600160a01b0316036108cb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108e757506108e7813361119b565b6109595760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016108c2565b61096383836112c3565b505050565b610970611331565b600861097c828261229d565b5050565b610988611331565b806109985761099561138b565b50565b6109956113e0565b6000600b54600a546109b29190612373565b905090565b6109c2335b82611423565b6109de5760405162461bcd60e51b81526004016108c290612386565b610963838383611482565b6109f1611331565b600a5460005b601481101561097c57600a8054906000610a10836123d3565b90915550610a29905033610a2483856123ec565b6115e6565b80610a33816123d3565b9150506109f7565b610a43611331565b47610995610a596006546001600160a01b031690565b82611600565b61096383838360405180602001604052806000815250610f77565b610a83336109bc565b610ae85760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b60648201526084016108c2565b610af181611719565b600b8054906000610b01836123d3565b919050555050565b610b116117ae565b600c54610100900460ff16610b385760405162461bcd60e51b81526004016108c2906123ff565b6014811115610b595760405162461bcd60e51b81526004016108c29061242b565b336000908152600d602052604090205460ff161515600114610be35760405162461bcd60e51b815260206004820152603d60248201527f596f7520617265206e6f74206f6e207468652070726573616c652077616c6c6560448201527f74206c697374206f72206861766520616c7265616479206d696e74656400000060648201526084016108c2565b34610bf4826509184e72a000612473565b1115610c125760405162461bcd60e51b81526004016108c29061248a565b60005b81811015610c5157600a80549081906000610c2f836123d3565b9190505550610c3e33826115e6565b5080610c49816123d3565b915050610c15565b50336000908152600d60205260409020805460ff191690556109956001600755565b610c7b611331565b60005b815181101561097c576001600d6000848481518110610c9f57610c9f6124ce565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610cdb816123d3565b915050610c7e565b610ceb611331565b600961097c828261229d565b610cff611331565b600c805460ff19811660ff90911615179055565b610d1b611331565b60005b815181101561097c576001600f6000848481518110610d3f57610d3f6124ce565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d7b816123d3565b915050610d1e565b6000818152600260205260408120546001600160a01b03168061078f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108c2565b60006001600160a01b038216610e4d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016108c2565b506001600160a01b031660009081526003602052604090205490565b610e71611331565b610e7b6000611807565b565b610e85611331565b600e805460ff19811660ff90911615179055565b6060600180546107a490612215565b610eb06117ae565b600c5460ff16610ed25760405162461bcd60e51b81526004016108c2906123ff565b6014811115610ef35760405162461bcd60e51b81526004016108c29061242b565b34610f04826509184e72a000612473565b1115610f225760405162461bcd60e51b81526004016108c29061248a565b60005b81811015610f6157600a80549081906000610f3f836123d3565b9190505550610f4e33826115e6565b5080610f59816123d3565b915050610f25565b506109956001600755565b61097c338383611859565b610f813383611423565b610f9d5760405162461bcd60e51b81526004016108c290612386565b610fa984848484611927565b50505050565b6060610fba82611264565b6000610fc461195a565b90506000815111610fe4576040518060200160405280600081525061100f565b80610fee84611969565b604051602001610fff9291906124e4565b6040516020818303038152906040525b9392505050565b61101e6117ae565b600e5460ff166110405760405162461bcd60e51b81526004016108c2906123ff565b336000908152600f602052604090205460ff1615156001146110ca5760405162461bcd60e51b815260206004820152603a60248201527f596f7520617265206e6f74206f6e2074686520667265652077616c6c6574206c60448201527f697374206f72206861766520616c7265616479206d696e74656400000000000060648201526084016108c2565b600a805490819060006110dc836123d3565b91905055506110eb33826115e6565b50336000908152600f60205260409020805460ff19169055610e7b6001600755565b6008805461111a90612215565b80601f016020809104026020016040519081016040528092919081815260200182805461114690612215565b80156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b505050505081565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6111d1611331565b6001600160a01b0381166112365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108c2565b61099581611807565b611247611331565b600c805461ff001981166101009182900460ff1615909102179055565b6000818152600260205260409020546001600160a01b03166109955760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108c2565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112f882610d83565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314610e7b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c2565b6113936119fc565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6113e8611a4c565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113c33390565b60008061142f83610d83565b9050806001600160a01b0316846001600160a01b031614806114565750611456818561119b565b8061147a5750836001600160a01b031661146f84610827565b6001600160a01b0316145b949350505050565b826001600160a01b031661149582610d83565b6001600160a01b0316146114bb5760405162461bcd60e51b81526004016108c290612513565b6001600160a01b03821661151d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108c2565b826001600160a01b031661153082610d83565b6001600160a01b0316146115565760405162461bcd60e51b81526004016108c290612513565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61097c828260405180602001604052806000815250611a99565b804710156116505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108c2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461169d576040519150601f19603f3d011682016040523d82523d6000602084013e6116a2565b606091505b50509050806109635760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108c2565b600061172482610d83565b905061172f82610d83565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6002600754036118005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108c2565b6002600755565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036118ba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108c2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611932848484611482565b61193e84848484611acc565b610fa95760405162461bcd60e51b81526004016108c290612558565b6060600980546107a490612215565b6060600061197683611bcd565b600101905060008167ffffffffffffffff81111561199657611996611f40565b6040519080825280601f01601f1916602001820160405280156119c0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119ca57509392505050565b600654600160a01b900460ff16610e7b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016108c2565b600654600160a01b900460ff1615610e7b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108c2565b611aa38383611ca5565b611ab06000848484611acc565b6109635760405162461bcd60e51b81526004016108c290612558565b60006001600160a01b0384163b15611bc257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b109033908990889088906004016125aa565b6020604051808303816000875af1925050508015611b4b575060408051601f3d908101601f19168201909252611b48918101906125e7565b60015b611ba8573d808015611b79576040519150601f19603f3d011682016040523d82523d6000602084013e611b7e565b606091505b508051600003611ba05760405162461bcd60e51b81526004016108c290612558565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061147a565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611c0c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611c38576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611c5657662386f26fc10000830492506010015b6305f5e1008310611c6e576305f5e100830492506008015b6127108310611c8257612710830492506004015b60648310611c94576064830492506002015b600a831061078f5760010192915050565b6001600160a01b038216611cfb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108c2565b6000818152600260205260409020546001600160a01b031615611d605760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c2565b6000818152600260205260409020546001600160a01b031615611dc55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c2565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461099557600080fd5b600060208284031215611e5857600080fd5b813561100f81611e30565b60005b83811015611e7e578181015183820152602001611e66565b50506000910152565b60008151808452611e9f816020860160208601611e63565b601f01601f19169290920160200192915050565b60208152600061100f6020830184611e87565b600060208284031215611ed857600080fd5b5035919050565b80356001600160a01b0381168114611ef657600080fd5b919050565b60008060408385031215611f0e57600080fd5b611f1783611edf565b946020939093013593505050565b600060208284031215611f3757600080fd5b61100f82611edf565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f7f57611f7f611f40565b604052919050565b600067ffffffffffffffff831115611fa157611fa1611f40565b611fb4601f8401601f1916602001611f56565b9050828152838383011115611fc857600080fd5b828260208301376000602084830101529392505050565b600060208284031215611ff157600080fd5b813567ffffffffffffffff81111561200857600080fd5b8201601f8101841361201957600080fd5b61147a84823560208401611f87565b80358015158114611ef657600080fd5b60006020828403121561204a57600080fd5b61100f82612028565b60008060006060848603121561206857600080fd5b61207184611edf565b925061207f60208501611edf565b9150604084013590509250925092565b600060208083850312156120a257600080fd5b823567ffffffffffffffff808211156120ba57600080fd5b818501915085601f8301126120ce57600080fd5b8135818111156120e0576120e0611f40565b8060051b91506120f1848301611f56565b818152918301840191848101908884111561210b57600080fd5b938501935b838510156121305761212185611edf565b82529385019390850190612110565b98975050505050505050565b6000806040838503121561214f57600080fd5b61215883611edf565b915061216660208401612028565b90509250929050565b6000806000806080858703121561218557600080fd5b61218e85611edf565b935061219c60208601611edf565b925060408501359150606085013567ffffffffffffffff8111156121bf57600080fd5b8501601f810187136121d057600080fd5b6121df87823560208401611f87565b91505092959194509250565b600080604083850312156121fe57600080fd5b61220783611edf565b915061216660208401611edf565b600181811c9082168061222957607f821691505b60208210810361224957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561096357600081815260208120601f850160051c810160208610156122765750805b601f850160051c820191505b8181101561229557828155600101612282565b505050505050565b815167ffffffffffffffff8111156122b7576122b7611f40565b6122cb816122c58454612215565b8461224f565b602080601f83116001811461230057600084156122e85750858301515b600019600386901b1c1916600185901b178555612295565b600085815260208120601f198616915b8281101561232f57888601518255948401946001909101908401612310565b508582101561234d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561078f5761078f61235d565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000600182016123e5576123e561235d565b5060010190565b8082018082111561078f5761078f61235d565b6020808252601290820152714d696e74206973206e6f742061637469766560701b604082015260600190565b60208082526028908201527f596f752077656e74206f766572206d617820746f6b656e7320706572207472616040820152673739b0b1ba34b7b760c11b606082015260800190565b808202811582820484141761078f5761078f61235d565b60208082526024908201527f596f752073656e742074686520696e636f727265637420616d6f756e74206f666040820152630408aa8960e31b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600083516124f6818460208801611e63565b83519083019061250a818360208801611e63565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125dd90830184611e87565b9695505050505050565b6000602082840312156125f957600080fd5b815161100f81611e3056fea2646970667358221220594b04b1df29ee2e318a11aafca9ea6bed24a4aa55a0cd705af0f9d6f7e176c564736f6c63430008130033",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// MAXTOKENSPURCHASE is a free data retrieval call binding the contract method 0x23eb0032.
//
// Solidity: function MAX_TOKENS_PURCHASE() view returns(uint256)
func (_Api *ApiCaller) MAXTOKENSPURCHASE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "MAX_TOKENS_PURCHASE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTOKENSPURCHASE is a free data retrieval call binding the contract method 0x23eb0032.
//
// Solidity: function MAX_TOKENS_PURCHASE() view returns(uint256)
func (_Api *ApiSession) MAXTOKENSPURCHASE() (*big.Int, error) {
	return _Api.Contract.MAXTOKENSPURCHASE(&_Api.CallOpts)
}

// MAXTOKENSPURCHASE is a free data retrieval call binding the contract method 0x23eb0032.
//
// Solidity: function MAX_TOKENS_PURCHASE() view returns(uint256)
func (_Api *ApiCallerSession) MAXTOKENSPURCHASE() (*big.Int, error) {
	return _Api.Contract.MAXTOKENSPURCHASE(&_Api.CallOpts)
}

// RESERVEDTOKENS is a free data retrieval call binding the contract method 0x68fc68c7.
//
// Solidity: function RESERVED_TOKENS() view returns(uint256)
func (_Api *ApiCaller) RESERVEDTOKENS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "RESERVED_TOKENS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RESERVEDTOKENS is a free data retrieval call binding the contract method 0x68fc68c7.
//
// Solidity: function RESERVED_TOKENS() view returns(uint256)
func (_Api *ApiSession) RESERVEDTOKENS() (*big.Int, error) {
	return _Api.Contract.RESERVEDTOKENS(&_Api.CallOpts)
}

// RESERVEDTOKENS is a free data retrieval call binding the contract method 0x68fc68c7.
//
// Solidity: function RESERVED_TOKENS() view returns(uint256)
func (_Api *ApiCallerSession) RESERVEDTOKENS() (*big.Int, error) {
	return _Api.Contract.RESERVEDTOKENS(&_Api.CallOpts)
}

// SPOILEDBANANASOCIETYPROVENANCE is a free data retrieval call binding the contract method 0xdaefe6d2.
//
// Solidity: function SPOILEDBANANASOCIETY_PROVENANCE() view returns(string)
func (_Api *ApiCaller) SPOILEDBANANASOCIETYPROVENANCE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "SPOILEDBANANASOCIETY_PROVENANCE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// SPOILEDBANANASOCIETYPROVENANCE is a free data retrieval call binding the contract method 0xdaefe6d2.
//
// Solidity: function SPOILEDBANANASOCIETY_PROVENANCE() view returns(string)
func (_Api *ApiSession) SPOILEDBANANASOCIETYPROVENANCE() (string, error) {
	return _Api.Contract.SPOILEDBANANASOCIETYPROVENANCE(&_Api.CallOpts)
}

// SPOILEDBANANASOCIETYPROVENANCE is a free data retrieval call binding the contract method 0xdaefe6d2.
//
// Solidity: function SPOILEDBANANASOCIETY_PROVENANCE() view returns(string)
func (_Api *ApiCallerSession) SPOILEDBANANASOCIETYPROVENANCE() (string, error) {
	return _Api.Contract.SPOILEDBANANASOCIETYPROVENANCE(&_Api.CallOpts)
}

// TOKENPRICE is a free data retrieval call binding the contract method 0xd2d8cb67.
//
// Solidity: function TOKEN_PRICE() view returns(uint256)
func (_Api *ApiCaller) TOKENPRICE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "TOKEN_PRICE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TOKENPRICE is a free data retrieval call binding the contract method 0xd2d8cb67.
//
// Solidity: function TOKEN_PRICE() view returns(uint256)
func (_Api *ApiSession) TOKENPRICE() (*big.Int, error) {
	return _Api.Contract.TOKENPRICE(&_Api.CallOpts)
}

// TOKENPRICE is a free data retrieval call binding the contract method 0xd2d8cb67.
//
// Solidity: function TOKEN_PRICE() view returns(uint256)
func (_Api *ApiCallerSession) TOKENPRICE() (*big.Int, error) {
	return _Api.Contract.TOKENPRICE(&_Api.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Api *ApiCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Api *ApiSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Api *ApiCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, owner)
}

// FreeWalletIsActive is a free data retrieval call binding the contract method 0xfdc9b483.
//
// Solidity: function freeWalletIsActive() view returns(bool)
func (_Api *ApiCaller) FreeWalletIsActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "freeWalletIsActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FreeWalletIsActive is a free data retrieval call binding the contract method 0xfdc9b483.
//
// Solidity: function freeWalletIsActive() view returns(bool)
func (_Api *ApiSession) FreeWalletIsActive() (bool, error) {
	return _Api.Contract.FreeWalletIsActive(&_Api.CallOpts)
}

// FreeWalletIsActive is a free data retrieval call binding the contract method 0xfdc9b483.
//
// Solidity: function freeWalletIsActive() view returns(bool)
func (_Api *ApiCallerSession) FreeWalletIsActive() (bool, error) {
	return _Api.Contract.FreeWalletIsActive(&_Api.CallOpts)
}

// FreeWalletList is a free data retrieval call binding the contract method 0x0c9a6313.
//
// Solidity: function freeWalletList(address ) view returns(bool)
func (_Api *ApiCaller) FreeWalletList(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "freeWalletList", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FreeWalletList is a free data retrieval call binding the contract method 0x0c9a6313.
//
// Solidity: function freeWalletList(address ) view returns(bool)
func (_Api *ApiSession) FreeWalletList(arg0 common.Address) (bool, error) {
	return _Api.Contract.FreeWalletList(&_Api.CallOpts, arg0)
}

// FreeWalletList is a free data retrieval call binding the contract method 0x0c9a6313.
//
// Solidity: function freeWalletList(address ) view returns(bool)
func (_Api *ApiCallerSession) FreeWalletList(arg0 common.Address) (bool, error) {
	return _Api.Contract.FreeWalletList(&_Api.CallOpts, arg0)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Api *ApiCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Api *ApiSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Api.Contract.GetApproved(&_Api.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Api *ApiCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Api.Contract.GetApproved(&_Api.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Api *ApiCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Api *ApiSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Api.Contract.IsApprovedForAll(&_Api.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Api *ApiCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Api.Contract.IsApprovedForAll(&_Api.CallOpts, owner, operator)
}

// MintIsActive is a free data retrieval call binding the contract method 0x471a4294.
//
// Solidity: function mintIsActive() view returns(bool)
func (_Api *ApiCaller) MintIsActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "mintIsActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MintIsActive is a free data retrieval call binding the contract method 0x471a4294.
//
// Solidity: function mintIsActive() view returns(bool)
func (_Api *ApiSession) MintIsActive() (bool, error) {
	return _Api.Contract.MintIsActive(&_Api.CallOpts)
}

// MintIsActive is a free data retrieval call binding the contract method 0x471a4294.
//
// Solidity: function mintIsActive() view returns(bool)
func (_Api *ApiCallerSession) MintIsActive() (bool, error) {
	return _Api.Contract.MintIsActive(&_Api.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCallerSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// NumTokensBurned is a free data retrieval call binding the contract method 0x7b51715d.
//
// Solidity: function numTokensBurned() view returns(uint256)
func (_Api *ApiCaller) NumTokensBurned(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "numTokensBurned")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokensBurned is a free data retrieval call binding the contract method 0x7b51715d.
//
// Solidity: function numTokensBurned() view returns(uint256)
func (_Api *ApiSession) NumTokensBurned() (*big.Int, error) {
	return _Api.Contract.NumTokensBurned(&_Api.CallOpts)
}

// NumTokensBurned is a free data retrieval call binding the contract method 0x7b51715d.
//
// Solidity: function numTokensBurned() view returns(uint256)
func (_Api *ApiCallerSession) NumTokensBurned() (*big.Int, error) {
	return _Api.Contract.NumTokensBurned(&_Api.CallOpts)
}

// NumTokensMinted is a free data retrieval call binding the contract method 0x4230baee.
//
// Solidity: function numTokensMinted() view returns(uint256)
func (_Api *ApiCaller) NumTokensMinted(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "numTokensMinted")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTokensMinted is a free data retrieval call binding the contract method 0x4230baee.
//
// Solidity: function numTokensMinted() view returns(uint256)
func (_Api *ApiSession) NumTokensMinted() (*big.Int, error) {
	return _Api.Contract.NumTokensMinted(&_Api.CallOpts)
}

// NumTokensMinted is a free data retrieval call binding the contract method 0x4230baee.
//
// Solidity: function numTokensMinted() view returns(uint256)
func (_Api *ApiCallerSession) NumTokensMinted() (*big.Int, error) {
	return _Api.Contract.NumTokensMinted(&_Api.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiSession) Owner() (common.Address, error) {
	return _Api.Contract.Owner(&_Api.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiCallerSession) Owner() (common.Address, error) {
	return _Api.Contract.Owner(&_Api.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Api *ApiCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Api *ApiSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Api.Contract.OwnerOf(&_Api.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Api *ApiCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Api.Contract.OwnerOf(&_Api.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiSession) Paused() (bool, error) {
	return _Api.Contract.Paused(&_Api.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiCallerSession) Paused() (bool, error) {
	return _Api.Contract.Paused(&_Api.CallOpts)
}

// PresaleIsActive is a free data retrieval call binding the contract method 0x30f72cd4.
//
// Solidity: function presaleIsActive() view returns(bool)
func (_Api *ApiCaller) PresaleIsActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "presaleIsActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PresaleIsActive is a free data retrieval call binding the contract method 0x30f72cd4.
//
// Solidity: function presaleIsActive() view returns(bool)
func (_Api *ApiSession) PresaleIsActive() (bool, error) {
	return _Api.Contract.PresaleIsActive(&_Api.CallOpts)
}

// PresaleIsActive is a free data retrieval call binding the contract method 0x30f72cd4.
//
// Solidity: function presaleIsActive() view returns(bool)
func (_Api *ApiCallerSession) PresaleIsActive() (bool, error) {
	return _Api.Contract.PresaleIsActive(&_Api.CallOpts)
}

// PresaleWalletList is a free data retrieval call binding the contract method 0x748c4557.
//
// Solidity: function presaleWalletList(address ) view returns(bool)
func (_Api *ApiCaller) PresaleWalletList(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "presaleWalletList", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PresaleWalletList is a free data retrieval call binding the contract method 0x748c4557.
//
// Solidity: function presaleWalletList(address ) view returns(bool)
func (_Api *ApiSession) PresaleWalletList(arg0 common.Address) (bool, error) {
	return _Api.Contract.PresaleWalletList(&_Api.CallOpts, arg0)
}

// PresaleWalletList is a free data retrieval call binding the contract method 0x748c4557.
//
// Solidity: function presaleWalletList(address ) view returns(bool)
func (_Api *ApiCallerSession) PresaleWalletList(arg0 common.Address) (bool, error) {
	return _Api.Contract.PresaleWalletList(&_Api.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Api *ApiCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Api *ApiSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Api.Contract.SupportsInterface(&_Api.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Api *ApiCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Api.Contract.SupportsInterface(&_Api.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCallerSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Api *ApiCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Api *ApiSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Api.Contract.TokenURI(&_Api.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Api *ApiCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Api.Contract.TokenURI(&_Api.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCallerSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Api *ApiTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Api *ApiSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Api *ApiTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Api *ApiTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Api *ApiSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Burn(&_Api.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_Api *ApiTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Burn(&_Api.TransactOpts, tokenId)
}

// FlipFreeWalletState is a paid mutator transaction binding the contract method 0x894a8cac.
//
// Solidity: function flipFreeWalletState() returns()
func (_Api *ApiTransactor) FlipFreeWalletState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "flipFreeWalletState")
}

// FlipFreeWalletState is a paid mutator transaction binding the contract method 0x894a8cac.
//
// Solidity: function flipFreeWalletState() returns()
func (_Api *ApiSession) FlipFreeWalletState() (*types.Transaction, error) {
	return _Api.Contract.FlipFreeWalletState(&_Api.TransactOpts)
}

// FlipFreeWalletState is a paid mutator transaction binding the contract method 0x894a8cac.
//
// Solidity: function flipFreeWalletState() returns()
func (_Api *ApiTransactorSession) FlipFreeWalletState() (*types.Transaction, error) {
	return _Api.Contract.FlipFreeWalletState(&_Api.TransactOpts)
}

// FlipMintState is a paid mutator transaction binding the contract method 0x59c74f29.
//
// Solidity: function flipMintState() returns()
func (_Api *ApiTransactor) FlipMintState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "flipMintState")
}

// FlipMintState is a paid mutator transaction binding the contract method 0x59c74f29.
//
// Solidity: function flipMintState() returns()
func (_Api *ApiSession) FlipMintState() (*types.Transaction, error) {
	return _Api.Contract.FlipMintState(&_Api.TransactOpts)
}

// FlipMintState is a paid mutator transaction binding the contract method 0x59c74f29.
//
// Solidity: function flipMintState() returns()
func (_Api *ApiTransactorSession) FlipMintState() (*types.Transaction, error) {
	return _Api.Contract.FlipMintState(&_Api.TransactOpts)
}

// FlipPresaleState is a paid mutator transaction binding the contract method 0xf81227d4.
//
// Solidity: function flipPresaleState() returns()
func (_Api *ApiTransactor) FlipPresaleState(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "flipPresaleState")
}

// FlipPresaleState is a paid mutator transaction binding the contract method 0xf81227d4.
//
// Solidity: function flipPresaleState() returns()
func (_Api *ApiSession) FlipPresaleState() (*types.Transaction, error) {
	return _Api.Contract.FlipPresaleState(&_Api.TransactOpts)
}

// FlipPresaleState is a paid mutator transaction binding the contract method 0xf81227d4.
//
// Solidity: function flipPresaleState() returns()
func (_Api *ApiTransactorSession) FlipPresaleState() (*types.Transaction, error) {
	return _Api.Contract.FlipPresaleState(&_Api.TransactOpts)
}

// InitFreeWalletList is a paid mutator transaction binding the contract method 0x5d04aeab.
//
// Solidity: function initFreeWalletList(address[] walletList) returns()
func (_Api *ApiTransactor) InitFreeWalletList(opts *bind.TransactOpts, walletList []common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "initFreeWalletList", walletList)
}

// InitFreeWalletList is a paid mutator transaction binding the contract method 0x5d04aeab.
//
// Solidity: function initFreeWalletList(address[] walletList) returns()
func (_Api *ApiSession) InitFreeWalletList(walletList []common.Address) (*types.Transaction, error) {
	return _Api.Contract.InitFreeWalletList(&_Api.TransactOpts, walletList)
}

// InitFreeWalletList is a paid mutator transaction binding the contract method 0x5d04aeab.
//
// Solidity: function initFreeWalletList(address[] walletList) returns()
func (_Api *ApiTransactorSession) InitFreeWalletList(walletList []common.Address) (*types.Transaction, error) {
	return _Api.Contract.InitFreeWalletList(&_Api.TransactOpts, walletList)
}

// InitPresaleWalletList is a paid mutator transaction binding the contract method 0x4f699a43.
//
// Solidity: function initPresaleWalletList(address[] walletList) returns()
func (_Api *ApiTransactor) InitPresaleWalletList(opts *bind.TransactOpts, walletList []common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "initPresaleWalletList", walletList)
}

// InitPresaleWalletList is a paid mutator transaction binding the contract method 0x4f699a43.
//
// Solidity: function initPresaleWalletList(address[] walletList) returns()
func (_Api *ApiSession) InitPresaleWalletList(walletList []common.Address) (*types.Transaction, error) {
	return _Api.Contract.InitPresaleWalletList(&_Api.TransactOpts, walletList)
}

// InitPresaleWalletList is a paid mutator transaction binding the contract method 0x4f699a43.
//
// Solidity: function initPresaleWalletList(address[] walletList) returns()
func (_Api *ApiTransactorSession) InitPresaleWalletList(walletList []common.Address) (*types.Transaction, error) {
	return _Api.Contract.InitPresaleWalletList(&_Api.TransactOpts, walletList)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfTokens) payable returns()
func (_Api *ApiTransactor) Mint(opts *bind.TransactOpts, numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mint", numberOfTokens)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfTokens) payable returns()
func (_Api *ApiSession) Mint(numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Mint(&_Api.TransactOpts, numberOfTokens)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfTokens) payable returns()
func (_Api *ApiTransactorSession) Mint(numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Mint(&_Api.TransactOpts, numberOfTokens)
}

// MintFreeWalletList is a paid mutator transaction binding the contract method 0xcca97911.
//
// Solidity: function mintFreeWalletList() returns()
func (_Api *ApiTransactor) MintFreeWalletList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mintFreeWalletList")
}

// MintFreeWalletList is a paid mutator transaction binding the contract method 0xcca97911.
//
// Solidity: function mintFreeWalletList() returns()
func (_Api *ApiSession) MintFreeWalletList() (*types.Transaction, error) {
	return _Api.Contract.MintFreeWalletList(&_Api.TransactOpts)
}

// MintFreeWalletList is a paid mutator transaction binding the contract method 0xcca97911.
//
// Solidity: function mintFreeWalletList() returns()
func (_Api *ApiTransactorSession) MintFreeWalletList() (*types.Transaction, error) {
	return _Api.Contract.MintFreeWalletList(&_Api.TransactOpts)
}

// MintPresaleWalletList is a paid mutator transaction binding the contract method 0x452b67cb.
//
// Solidity: function mintPresaleWalletList(uint256 numberOfTokens) payable returns()
func (_Api *ApiTransactor) MintPresaleWalletList(opts *bind.TransactOpts, numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mintPresaleWalletList", numberOfTokens)
}

// MintPresaleWalletList is a paid mutator transaction binding the contract method 0x452b67cb.
//
// Solidity: function mintPresaleWalletList(uint256 numberOfTokens) payable returns()
func (_Api *ApiSession) MintPresaleWalletList(numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintPresaleWalletList(&_Api.TransactOpts, numberOfTokens)
}

// MintPresaleWalletList is a paid mutator transaction binding the contract method 0x452b67cb.
//
// Solidity: function mintPresaleWalletList(uint256 numberOfTokens) payable returns()
func (_Api *ApiTransactorSession) MintPresaleWalletList(numberOfTokens *big.Int) (*types.Transaction, error) {
	return _Api.Contract.MintPresaleWalletList(&_Api.TransactOpts, numberOfTokens)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiSession) RenounceOwnership() (*types.Transaction, error) {
	return _Api.Contract.RenounceOwnership(&_Api.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Api.Contract.RenounceOwnership(&_Api.TransactOpts)
}

// ReserveTokens is a paid mutator transaction binding the contract method 0x27ac36c4.
//
// Solidity: function reserveTokens() returns()
func (_Api *ApiTransactor) ReserveTokens(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "reserveTokens")
}

// ReserveTokens is a paid mutator transaction binding the contract method 0x27ac36c4.
//
// Solidity: function reserveTokens() returns()
func (_Api *ApiSession) ReserveTokens() (*types.Transaction, error) {
	return _Api.Contract.ReserveTokens(&_Api.TransactOpts)
}

// ReserveTokens is a paid mutator transaction binding the contract method 0x27ac36c4.
//
// Solidity: function reserveTokens() returns()
func (_Api *ApiTransactorSession) ReserveTokens() (*types.Transaction, error) {
	return _Api.Contract.ReserveTokens(&_Api.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SafeTransferFrom(&_Api.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.SafeTransferFrom(&_Api.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Api *ApiTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Api *ApiSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Api.Contract.SafeTransferFrom0(&_Api.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Api *ApiTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Api.Contract.SafeTransferFrom0(&_Api.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Api *ApiTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Api *ApiSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Api.Contract.SetApprovalForAll(&_Api.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Api *ApiTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Api.Contract.SetApprovalForAll(&_Api.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_Api *ApiTransactor) SetBaseURI(opts *bind.TransactOpts, uri string) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setBaseURI", uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_Api *ApiSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _Api.Contract.SetBaseURI(&_Api.TransactOpts, uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_Api *ApiTransactorSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _Api.Contract.SetBaseURI(&_Api.TransactOpts, uri)
}

// SetPaused is a paid mutator transaction binding the contract method 0x16c38b3c.
//
// Solidity: function setPaused(bool _setPaused) returns()
func (_Api *ApiTransactor) SetPaused(opts *bind.TransactOpts, _setPaused bool) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setPaused", _setPaused)
}

// SetPaused is a paid mutator transaction binding the contract method 0x16c38b3c.
//
// Solidity: function setPaused(bool _setPaused) returns()
func (_Api *ApiSession) SetPaused(_setPaused bool) (*types.Transaction, error) {
	return _Api.Contract.SetPaused(&_Api.TransactOpts, _setPaused)
}

// SetPaused is a paid mutator transaction binding the contract method 0x16c38b3c.
//
// Solidity: function setPaused(bool _setPaused) returns()
func (_Api *ApiTransactorSession) SetPaused(_setPaused bool) (*types.Transaction, error) {
	return _Api.Contract.SetPaused(&_Api.TransactOpts, _setPaused)
}

// SetProvenanceHash is a paid mutator transaction binding the contract method 0x10969523.
//
// Solidity: function setProvenanceHash(string provenanceHash) returns()
func (_Api *ApiTransactor) SetProvenanceHash(opts *bind.TransactOpts, provenanceHash string) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "setProvenanceHash", provenanceHash)
}

// SetProvenanceHash is a paid mutator transaction binding the contract method 0x10969523.
//
// Solidity: function setProvenanceHash(string provenanceHash) returns()
func (_Api *ApiSession) SetProvenanceHash(provenanceHash string) (*types.Transaction, error) {
	return _Api.Contract.SetProvenanceHash(&_Api.TransactOpts, provenanceHash)
}

// SetProvenanceHash is a paid mutator transaction binding the contract method 0x10969523.
//
// Solidity: function setProvenanceHash(string provenanceHash) returns()
func (_Api *ApiTransactorSession) SetProvenanceHash(provenanceHash string) (*types.Transaction, error) {
	return _Api.Contract.SetProvenanceHash(&_Api.TransactOpts, provenanceHash)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Api *ApiTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Api.Contract.TransferOwnership(&_Api.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Api.Contract.TransferOwnership(&_Api.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Api *ApiTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Api *ApiSession) Withdraw() (*types.Transaction, error) {
	return _Api.Contract.Withdraw(&_Api.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Api *ApiTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Api.Contract.Withdraw(&_Api.TransactOpts)
}

// ApiApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Api contract.
type ApiApprovalIterator struct {
	Event *ApiApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiApproval represents a Approval event raised by the Api contract.
type ApiApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Api *ApiFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ApiApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ApiApprovalIterator{contract: _Api.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Api *ApiFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ApiApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiApproval)
				if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Api *ApiFilterer) ParseApproval(log types.Log) (*ApiApproval, error) {
	event := new(ApiApproval)
	if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Api contract.
type ApiApprovalForAllIterator struct {
	Event *ApiApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiApprovalForAll represents a ApprovalForAll event raised by the Api contract.
type ApiApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Api *ApiFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ApiApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ApiApprovalForAllIterator{contract: _Api.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Api *ApiFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ApiApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiApprovalForAll)
				if err := _Api.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Api *ApiFilterer) ParseApprovalForAll(log types.Log) (*ApiApprovalForAll, error) {
	event := new(ApiApprovalForAll)
	if err := _Api.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Api contract.
type ApiOwnershipTransferredIterator struct {
	Event *ApiOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiOwnershipTransferred represents a OwnershipTransferred event raised by the Api contract.
type ApiOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ApiOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ApiOwnershipTransferredIterator{contract: _Api.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ApiOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiOwnershipTransferred)
				if err := _Api.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) ParseOwnershipTransferred(log types.Log) (*ApiOwnershipTransferred, error) {
	event := new(ApiOwnershipTransferred)
	if err := _Api.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Api contract.
type ApiPausedIterator struct {
	Event *ApiPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiPaused represents a Paused event raised by the Api contract.
type ApiPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) FilterPaused(opts *bind.FilterOpts) (*ApiPausedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ApiPausedIterator{contract: _Api.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ApiPaused) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiPaused)
				if err := _Api.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) ParsePaused(log types.Log) (*ApiPaused, error) {
	event := new(ApiPaused)
	if err := _Api.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Api contract.
type ApiTransferIterator struct {
	Event *ApiTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiTransfer represents a Transfer event raised by the Api contract.
type ApiTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Api *ApiFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ApiTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ApiTransferIterator{contract: _Api.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Api *ApiFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ApiTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiTransfer)
				if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Api *ApiFilterer) ParseTransfer(log types.Log) (*ApiTransfer, error) {
	event := new(ApiTransfer)
	if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Api contract.
type ApiUnpausedIterator struct {
	Event *ApiUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiUnpaused represents a Unpaused event raised by the Api contract.
type ApiUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ApiUnpausedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ApiUnpausedIterator{contract: _Api.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ApiUnpaused) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiUnpaused)
				if err := _Api.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) ParseUnpaused(log types.Log) (*ApiUnpaused, error) {
	event := new(ApiUnpaused)
	if err := _Api.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
